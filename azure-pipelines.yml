
trigger:
  - none
  
name: Azure Pipelines

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: 'bf16207c-0192-48bf-96d5-04c4a6350a49'
  subscription_id: '032f2e80-b6ef-44c4-93d4-6feb62c932cf'
  # Environment name
  environmentName: 'final-udacity-project-dennis'
  publicIP: ''
stages:
- stage: deploy_terraform
  displayName: provision infrastructure  
  jobs: 
  - deployment: deploy_terraform
    continueOnError: false
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self           
            - task: TerraformInstaller@0
              displayName: 'install terraform'
              inputs:
                terraformVersion: 'latest'
            - task: Bash@3
              displayName: init
              inputs:
                targetType: 'inline'
                script: |
                  terraform init \
                  -backend-config="storage_account_name=dennistfstorageaccount" \
                  -backend-config="container_name=dennistfcontainer" \
                  -backend-config="key=project.tfstate" \
                  -backend-config="access_key=$TF_STATE_BLOB_ACCESS_KEY"
                workingDirectory: $(System.DefaultWorkingDirectory)/terraform
              env:
                TF_STATE_BLOB_ACCESS_KEY: $(access-key)
                ARM_CLIENT_SECRET: $(service-principal-key)
                ARM_CLIENT_ID: $(service-principal-name)
                ARM_SUBSCRIPTION_ID: '032f2e80-b6ef-44c4-93d4-6feb62c932cf'
                ARM_TENANT_ID: $(tenant)
            - task: Bash@3
              displayName: plan
              inputs:
                targetType: 'inline'
                script: |
                  terraform plan -out="out.plan"
                workingDirectory: $(System.DefaultWorkingDirectory)/terraform
              env:
                ARM_CLIENT_SECRET: $(finalClientSecret)
                ARM_CLIENT_ID: $(finalClientID)
                ARM_SUBSCRIPTION_ID: '032f2e80-b6ef-44c4-93d4-6feb62c932cf'
                ARM_TENANT_ID: $(tenant)
            - task: Bash@3
              continueOnError: true
              displayName: apply
              inputs:
                targetType: 'inline'
                script: |
                  terraform apply out.plan
                workingDirectory: $(System.DefaultWorkingDirectory)/terraform
              env:
                ARM_CLIENT_SECRET: $(finalClientSecret)
                ARM_CLIENT_ID: $(finalClientID)
                ARM_SUBSCRIPTION_ID: '032f2e80-b6ef-44c4-93d4-6feb62c932cf'
                ARM_TENANT_ID: $(tenant)           
- stage: Build
  displayName: Build
  jobs:
  - job: Build
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/selenium-tests.zip
        replaceExistingArchive: true
    - upload: $(Build.ArtifactStagingDirectory)/selenium-tests.zip
      artifact: selenium
- stage: WebAppDeployment
  displayName: Web App Deployment
  jobs:
  - deployment: FakeRestAPI
    environment: 'uitests'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'azure connection'
              appType: 'webApp'
              appName: 'dennisTerraformUdacityFinalProject1'
              package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
              deploymentMethod: 'auto'
  - deployment: DeployVM
    # On the first run this will fail because the pipelinagent for the environment needs to be installed.
    # Maybe theres a need for 2 pipelines, one to deploy the actual infrastructure and one to actually test changes in the code
    # Maybe use a container to execute the selenium tests. 
    environment:
      name: 'dev'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip install selenium
                
                # download chrome driver
                FILE=chromedriver_linux64.zip
                if [ -f "$FILE" ]; then
                  echo "$FILE exists."
                else
                  wget https://chromedriver.storage.googleapis.com/2.41/chromedriver_linux64.zip
                fi
                # install chrome driver
                unzip chromedriver_linux64.zip
                sudo mv chromedriver /usr/bin/chromedriver
                sudo chown root:root /usr/bin/chromedriver
                sudo chmod +x /usr/bin/chromedriver
                chromium-browser -version
                chromedriver --version
                # agent log analytics
                wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w dbf2bd83-6d47-436b-a499-a2b566def8fe -s MuSR8Ti5MMi0E+9+1NM4NxCxFqJcfLzuGD0EtGhjXo3Vhy/THcSdCf1WyQnkXafD+6DiFjiOAEfJiQh6EbZVeg== -d opinsights.azure.com
- stage: IntegrationTests
  displayName: Integration Tests
  jobs:
  - job: PostmanTests
    displayName: PostmanTests
    steps: 
    - task: NodeTool@0
      displayName: Install Node v12.X
      inputs:
        versionSpec: '12.x'
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'npm install newman'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: CmdLine@2
      displayName: Run Regression Tests
      inputs:
        script: 'newman run automatedtesting/postman/RegressionTests.json -e automatedtesting/postman/RegressionTest.Environment.json --delay-request 5000 --bail newman -x --reporters cli,junit --reporter-junit-export Results/RegressionTests.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      continueOnError: true
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      inputs:
        script: 'newman run automatedtesting/postman/DataValidationTests.json -e automatedtesting/postman/DataValidationTests.Environment.json --delay-request 5000 --bail newman -x --reporters cli,junit --reporter-junit-export Results/DataValidationTests.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      continueOnError: true
    - task: CmdLine@2
      inputs:
        script: 'ls'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
    - task: PublishTestResults@2
      displayName: Publish Test Reports
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)/Results/*.xml'
- stage: UITests
  displayName: UI Tests
  jobs:
  - deployment: VMRunUITests
    displayName: Run UI Tests
    environment:
      name:  'VMUITests'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: 'Download Selenium'
            artifact: selenium
          - task: Bash@3
            displayName: UI Tests
            inputs:
              targetType: 'inline'
              script: |
                #!/bin/sh -x
                unzip -o $(Pipeline.Workspace)/selenium/selenium-tests.zip -d .
                sudo mkdir /var/logs
                pip3 install selenium
                python3 uitests.py > ui-logs.log
                cat ui-logs.log
                sudo mv ui-logs.log /var/logs
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '/var/logs/ui-logs.log'
              ArtifactName: 'seleniumlogs'
              publishLocation: 'Container'
- stage: JMeterTests
  displayName: JMeter Tests
  jobs:
  - job: JMeterTests
    displayName: JMeterTests
    steps: 
    - task: JMeterInstaller@0
      inputs:
        jmeterVersion: '5.2.1'
    - task: Bash@3
      displayName: EnduranceTest
      inputs:
        targetType: 'inline'
        script: 'jmeter -n -t automatedtesting/jmeter/EnduranceTestSuite.jmx -Jresdir=automatedtesting/jmeter/endurancepages.csv -l automatedtesting/jmeter/report/enduranceresults.jtl -e -o automatedtesting/jmeter/endurancereport'
    - task: Bash@3
      displayName: StressTest
      inputs:
        targetType: 'inline'
        script: 'jmeter -n -t automatedtesting/jmeter/StressTestSuite.jmx -Jresdir=automatedtesting/jmeter/stresspages.csv -l automatedtesting/jmeter/report/stressresults.jtl -f -e -o automatedtesting/jmeter/stressreport'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: 'automatedtesting/jmeter'
        ArtifactName: 'jmeter'
        publishLocation: 'Container'